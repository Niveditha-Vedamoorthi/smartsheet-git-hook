#!/usr/bin/env python
##
#
# This script expects to be deployed as post-receive in the hooks directory of a bare git repository
# directory with an accompanying file named post-receive.cfg with the following lines filled out:
# {
#   "sheetId" : "<gridId of bug tracker sheet>",
#   "prefix" : "Bug-",
#   "token" : "<smartsheet token>",
#   "git" : "/usr/bin/git",
#   "url" : "<optional url to repo browser>"
# }
#
# if the post-receive.cfg file does not exist, this script will emit a warning about configuration.
#
##

import commands
import httplib
import json
import os
import re
import subprocess
import sys

## functions

## reads the contents of the specified json config file
def readConfig(cfg):
    try:
        fr = open(cfg, "r")
        str = fr.read();
        dict = json.loads(str)
        fr.close()
    except IOError:
        print "Warning: unable to read config file " + cfg
        return None

    ## all but url are required
    if set(('token', 'sheetId', 'prefix', 'git')) <= set(dict):
        if not ('url' in dict.keys()):
            dict['url'] = None
    else:
        print "Warning: post-receive hook not properly configured"
        return None

    return dict

## invokes smartsheet API to get the column id/title mapping for the configured sheet
def readColumnMap(token, sheetId):
    headers = {'Authorization': "Bearer " + token}
    httpconnection = httplib.HTTPSConnection("api.smartsheet.com")

    httpconnection.request("GET", "/2.0/sheets/" + sheetId + "/columns", headers=headers)
    response = httpconnection.getresponse()
    columnInfo = json.loads(response.read())
    httpconnection.close();

    dict = {}
    for col in columnInfo['data']:
        dict[col['id']] = col['title']
        dict[col['title']] = col['id']

    return dict

## returns True if cell
def isTheBugRow(row, bug, columns):
    for cell in row['cells']:
        if (columns['ID'] == cell['columnId']) and (cell['value'] == bug):
            return True
    return False

## finds the smartsheet row associated with the specified bugid
def readRow(token, sheetId, columns, bugid, prefix):
    headers = {'Authorization': "Bearer " + token}
    httpconnection = httplib.HTTPSConnection("api.smartsheet.com")

    bug = prefix + bugid

    httpconnection.request("GET", "/2.0/search/sheets/" + sheetId + "?query=" + bug, headers=headers)
    response = httpconnection.getresponse()
    obj = json.loads(response.read())

    for item in obj['results']:
        if (item['objectType'] == "row"):
            httpconnection.request("GET", "/2.0/sheets/" + sheetId + "/rows/" + str(item['objectId']), headers=headers)
            response = httpconnection.getresponse()
            irow = json.loads(response.read())
            if isTheBugRow(irow, bug, columns):
                httpconnection.close();
                return irow

    httpconnection.close();
    return {'cells':[]}

## produces the json body for updating the bug tracker row
def rowUpdate(row, columns, msg, fixby, branch):
    list = []
    list.append({'columnId':columns['Status'], 'value':"Resolved"})
    list.append({'columnId':columns['Resolution'], 'value':"Fixed"})
    list.append({'columnId':columns['Fix in Branch'], 'value':branch, 'strict':"false"})

    # compute target release if branch matches release-nn-xxxx
    if (branch.startswith("release-")):
        parts=branch.split("-")
        if (len(parts) == 3):
            target=parts[1] + " - " + parts[2].title()
            list.append({'columnId':columns['Target Release'], 'value':target})

    list.append({'columnId':columns['Fixed By'], 'value':fixby})

    # initialize comments in case there's nothing to add later
    comments = {'columnId':columns['Comments'], 'value':msg}
    open = False;

    # Check cell values - be careful if the cell does not exist, does not have a value, or equals
    # our value we expect.
    cells = row['cells']
    for cell in cells:
        if (columns[cell['columnId']] == "Comments"):
            existingValue = cell.get('value', "")
            if (len(existingValue) > 0):
                existingValue = existingValue + "\n\n"
            comments = {'columnId':cell['columnId'], 'value': existingValue + msg}
        elif ((columns[cell['columnId']] == "Status") and (cell.get('value', "Open") == "Open")):
            open = True;

    list.append(comments)

    # only update cells if status is Open
    update = {'cells': []}
    if open:
        update['cells'] = list

    return update

## invokes the smartsheet API to perform the row update in the bug tracker sheet
def putUpdate(token, sheetId, rowId, update):
    headers = {'Authorization':"Bearer " + token, 'Content-Type':"application/json"}
    httpconnection = httplib.HTTPSConnection("api.smartsheet.com")

    httpconnection.request("PUT", "/2.0/sheets/" + sheetId + "/rows/" + rowId, body=update, headers=headers)
    response = httpconnection.getresponse()
    rval = json.loads(response.read())
    httpconnection.close();
    return rval

## workflow function that reads configuraton, column mapping, and performs row update in the bug tracker sheet
def update(bugid, ref, fixby, name, branch, config):
    if config:
        token = config['token']
        sheetId = config['sheetId']
        prefix = config['prefix']
        columns = readColumnMap(token, sheetId)
        row = readRow(token, sheetId, columns, bugid, prefix)
        if 'id' in row.keys():
            msg = "Fixed in commit: " + ref + " by: " + name
            if 'url' in config.keys() and config['url']:
                msg = msg + "\n" + config['url'] + "/commit/" + ref
            update = rowUpdate(row, columns, msg, fixby, branch)
            if len(update['cells']) > 0:
                return putUpdate(token, sheetId, str(row['id']), json.dumps(update))
    return None

## validates the args passed via stdin and converted to an array
def validate(dir, args, config):
    if len(args) == 3:
        ## three args expected are: reference start, reference end, branch path
        commitRefs(dir, args[0], args[1], args[2].split('/')[-1], config)
    return

## retrieves the references for the range specified
def commitRefs(dir, refStart, refEnd, branch, config):
    output = callGit(dir, config['git'] + ' rev-list ' + refStart + '..' + refEnd)

    for line in output.split():
        ## check to see if the commit reference exists only once (first commit) to avoid attempting to update during a merge
        if commitOccurances(dir, line, config) == 1:
            commit(dir, line, branch, config)
    return

## returns the number of occurances the ref id appears in branches
def commitOccurances(dir, ref, config):
    output = filter(lambda a: a != '*', callGit(dir, config['git'] + ' branch --contains ' + ref).split())
    return len(output)

## invokes git log command to get details of commit and then performs the update workflow if a bug was referenced as fixed
def commit(dir, ref, branch, config):
    output = callGit(dir, config['git'] + ' log --pretty="%H|%cn|%ce|%cd|%s" -1 ' + ref)

    gitstats = output.split('|')

    if len(gitstats) >= 5:
        ref = gitstats[0]
        cn = gitstats[1]
        ce = gitstats[2]
        cd = gitstats[3]
        s = '|'.join(gitstats[4:])

        match = re.search("[fF][iI][xX](es)? [bB][uU][gG]-[0-9]+", s)
        if (match):
            parts=match.group().split("-")
            if (len(parts) == 2):
                bugid=parts[1]
                prefix = config['prefix']
                result = update(bugid, ref, ce, cn, branch, config)
                if (result and result['resultCode'] == 0):
                    print prefix + bugid + " updated in Bug Tracker"
    return

## spawn process to call git and returns output
def callGit(dir, cmd):
    process = subprocess.Popen(cmd, cwd = os.path.dirname(dir), shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE )
    (out, err) = process.communicate()
    return str(out)

## start of script
stdin = sys.stdin
dir = os.getenv("GIT_DIR", ".")

if dir == ".":
    dir = os.getcwd() + "/"

## the hook location for where you place this script and configuration
## may be different for your git repo
config = readConfig("custom_hooks/post-receive.cfg")
if config:
    for line in stdin:
        validate(dir, line.split(), config)
## end of script
